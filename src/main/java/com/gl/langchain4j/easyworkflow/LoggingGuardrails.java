/*
 *
 * Copyright 2025 Gregory Ledenev (gregory.ledenev37@gmail.com)
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the “Software”), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.gl.langchain4j.easyworkflow;

import dev.langchain4j.data.message.AiMessage;
import dev.langchain4j.data.message.UserMessage;
import dev.langchain4j.guardrail.InputGuardrail;
import dev.langchain4j.guardrail.InputGuardrailResult;
import dev.langchain4j.guardrail.OutputGuardrail;
import dev.langchain4j.guardrail.OutputGuardrailResult;

import static com.gl.langchain4j.easyworkflow.EasyWorkflow.logInput;
import static com.gl.langchain4j.easyworkflow.EasyWorkflow.logOutput;

/**
 * Provides guardrails for logging input and output messages within the EasyWorkflow framework.
 * These guardrails are designed to log messages before they are processed by the LLM (for input)
 * or after they are generated by the LLM (for output).
 */
public class LoggingGuardrails {
    /**
     * An {@link OutputGuardrail} implementation that logs the AI message generated by the LLM.
     */
    public static class Output implements OutputGuardrail {
        private final Class<?> agentClass;
        private final String outputName;

        /**
         * Constructs an {@code Output} guardrail.
         *
         * @param aAgentClass The class of the agent that generated the output.
         * @param aOutputName The name of the output being logged.
         */
        public Output(Class<?> aAgentClass, String aOutputName) {
            this.agentClass = aAgentClass;
            this.outputName = aOutputName;
        }

        @Override
        public OutputGuardrailResult validate(AiMessage responseFromLLM) {
            logOutput(agentClass, outputName, responseFromLLM.text());
            return success();
        }
    }

    /**
     * An {@link InputGuardrail} implementation that logs the user message before it is sent to the LLM.
     */
    public static class Input implements InputGuardrail {
        /**
         * Constructs an {@code Input} guardrail.
         *
         * @param agentClass The class of the agent that will process the input.
         */
        public Input(Class<?> agentClass) {
            this.agentClass = agentClass;
        }

        @Override
        public InputGuardrailResult validate(UserMessage userMessage) {
            logInput(agentClass, userMessage);
            return success();
        }

        private final Class<?> agentClass;
    }
}
